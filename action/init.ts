/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.1
 * source: init.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace init {
    export class InitRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id_token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id_token" in data && data.id_token != undefined) {
                    this.id_token = data.id_token;
                }
            }
        }
        get id_token() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id_token(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id_token?: string;
        }): InitRequest {
            const message = new InitRequest({});
            if (data.id_token != null) {
                message.id_token = data.id_token;
            }
            return message;
        }
        toObject() {
            const data: {
                id_token?: string;
            } = {};
            if (this.id_token != null) {
                data.id_token = this.id_token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id_token.length)
                writer.writeString(1, this.id_token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InitRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InitRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id_token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InitRequest {
            return InitRequest.deserialize(bytes);
        }
    }
    export class InitResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            spiffe_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("spiffe_id" in data && data.spiffe_id != undefined) {
                    this.spiffe_id = data.spiffe_id;
                }
            }
        }
        get spiffe_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set spiffe_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            spiffe_id?: string;
        }): InitResponse {
            const message = new InitResponse({});
            if (data.spiffe_id != null) {
                message.spiffe_id = data.spiffe_id;
            }
            return message;
        }
        toObject() {
            const data: {
                spiffe_id?: string;
            } = {};
            if (this.spiffe_id != null) {
                data.spiffe_id = this.spiffe_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.spiffe_id.length)
                writer.writeString(2, this.spiffe_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InitResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InitResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        message.spiffe_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InitResponse {
            return InitResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedInitAPIService {
        static definition = {
            Init: {
                path: "/init.InitAPI/Init",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: InitRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => InitRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: InitResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => InitResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Init(call: grpc_1.ServerUnaryCall<InitRequest, InitResponse>, callback: grpc_1.sendUnaryData<InitResponse>): void;
    }
    export class InitAPIClient extends grpc_1.makeGenericClientConstructor(UnimplementedInitAPIService.definition, "InitAPI", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Init: GrpcUnaryServiceInterface<InitRequest, InitResponse> = (message: InitRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<InitResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<InitResponse>, callback?: grpc_1.requestCallback<InitResponse>): grpc_1.ClientUnaryCall => {
            return super.Init(message, metadata, options, callback);
        };
    }
}
