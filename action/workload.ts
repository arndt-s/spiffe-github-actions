/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.1
 * source: workload.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/protobuf/struct";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export class X509SVIDRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): X509SVIDRequest {
        const message = new X509SVIDRequest({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): X509SVIDRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new X509SVIDRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): X509SVIDRequest {
        return X509SVIDRequest.deserialize(bytes);
    }
}
export class X509SVIDResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        svids?: X509SVID[];
        crl?: Uint8Array[];
        federated_bundles?: Map<string, Uint8Array>;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("svids" in data && data.svids != undefined) {
                this.svids = data.svids;
            }
            if ("crl" in data && data.crl != undefined) {
                this.crl = data.crl;
            }
            if ("federated_bundles" in data && data.federated_bundles != undefined) {
                this.federated_bundles = data.federated_bundles;
            }
        }
        if (!this.federated_bundles)
            this.federated_bundles = new Map();
    }
    get svids() {
        return pb_1.Message.getRepeatedWrapperField(this, X509SVID, 1) as X509SVID[];
    }
    set svids(value: X509SVID[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    get crl() {
        return pb_1.Message.getFieldWithDefault(this, 2, []) as Uint8Array[];
    }
    set crl(value: Uint8Array[]) {
        pb_1.Message.setField(this, 2, value);
    }
    get federated_bundles() {
        return pb_1.Message.getField(this, 3) as any as Map<string, Uint8Array>;
    }
    set federated_bundles(value: Map<string, Uint8Array>) {
        pb_1.Message.setField(this, 3, value as any);
    }
    static fromObject(data: {
        svids?: ReturnType<typeof X509SVID.prototype.toObject>[];
        crl?: Uint8Array[];
        federated_bundles?: {
            [key: string]: Uint8Array;
        };
    }): X509SVIDResponse {
        const message = new X509SVIDResponse({});
        if (data.svids != null) {
            message.svids = data.svids.map(item => X509SVID.fromObject(item));
        }
        if (data.crl != null) {
            message.crl = data.crl;
        }
        if (typeof data.federated_bundles == "object") {
            message.federated_bundles = new Map(Object.entries(data.federated_bundles));
        }
        return message;
    }
    toObject() {
        const data: {
            svids?: ReturnType<typeof X509SVID.prototype.toObject>[];
            crl?: Uint8Array[];
            federated_bundles?: {
                [key: string]: Uint8Array;
            };
        } = {};
        if (this.svids != null) {
            data.svids = this.svids.map((item: X509SVID) => item.toObject());
        }
        if (this.crl != null) {
            data.crl = this.crl;
        }
        if (this.federated_bundles != null) {
            data.federated_bundles = (Object.fromEntries)(this.federated_bundles);
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.svids.length)
            writer.writeRepeatedMessage(1, this.svids, (item: X509SVID) => item.serialize(writer));
        if (this.crl.length)
            writer.writeRepeatedBytes(2, this.crl);
        for (const [key, value] of this.federated_bundles) {
            writer.writeMessage(3, this.federated_bundles, () => {
                writer.writeString(1, key);
                writer.writeBytes(2, value);
            });
        }
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): X509SVIDResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new X509SVIDResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.svids, () => pb_1.Message.addToRepeatedWrapperField(message, 1, X509SVID.deserialize(reader), X509SVID));
                    break;
                case 2:
                    pb_1.Message.addToRepeatedField(message, 2, reader.readBytes());
                    break;
                case 3:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.federated_bundles as any, reader, reader.readString, reader.readBytes));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): X509SVIDResponse {
        return X509SVIDResponse.deserialize(bytes);
    }
}
export class X509SVID extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        spiffe_id?: string;
        x509_svid?: Uint8Array;
        x509_svid_key?: Uint8Array;
        bundle?: Uint8Array;
        hint?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("spiffe_id" in data && data.spiffe_id != undefined) {
                this.spiffe_id = data.spiffe_id;
            }
            if ("x509_svid" in data && data.x509_svid != undefined) {
                this.x509_svid = data.x509_svid;
            }
            if ("x509_svid_key" in data && data.x509_svid_key != undefined) {
                this.x509_svid_key = data.x509_svid_key;
            }
            if ("bundle" in data && data.bundle != undefined) {
                this.bundle = data.bundle;
            }
            if ("hint" in data && data.hint != undefined) {
                this.hint = data.hint;
            }
        }
    }
    get spiffe_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set spiffe_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get x509_svid() {
        return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
    }
    set x509_svid(value: Uint8Array) {
        pb_1.Message.setField(this, 2, value);
    }
    get x509_svid_key() {
        return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
    }
    set x509_svid_key(value: Uint8Array) {
        pb_1.Message.setField(this, 3, value);
    }
    get bundle() {
        return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
    }
    set bundle(value: Uint8Array) {
        pb_1.Message.setField(this, 4, value);
    }
    get hint() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set hint(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data: {
        spiffe_id?: string;
        x509_svid?: Uint8Array;
        x509_svid_key?: Uint8Array;
        bundle?: Uint8Array;
        hint?: string;
    }): X509SVID {
        const message = new X509SVID({});
        if (data.spiffe_id != null) {
            message.spiffe_id = data.spiffe_id;
        }
        if (data.x509_svid != null) {
            message.x509_svid = data.x509_svid;
        }
        if (data.x509_svid_key != null) {
            message.x509_svid_key = data.x509_svid_key;
        }
        if (data.bundle != null) {
            message.bundle = data.bundle;
        }
        if (data.hint != null) {
            message.hint = data.hint;
        }
        return message;
    }
    toObject() {
        const data: {
            spiffe_id?: string;
            x509_svid?: Uint8Array;
            x509_svid_key?: Uint8Array;
            bundle?: Uint8Array;
            hint?: string;
        } = {};
        if (this.spiffe_id != null) {
            data.spiffe_id = this.spiffe_id;
        }
        if (this.x509_svid != null) {
            data.x509_svid = this.x509_svid;
        }
        if (this.x509_svid_key != null) {
            data.x509_svid_key = this.x509_svid_key;
        }
        if (this.bundle != null) {
            data.bundle = this.bundle;
        }
        if (this.hint != null) {
            data.hint = this.hint;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.spiffe_id.length)
            writer.writeString(1, this.spiffe_id);
        if (this.x509_svid.length)
            writer.writeBytes(2, this.x509_svid);
        if (this.x509_svid_key.length)
            writer.writeBytes(3, this.x509_svid_key);
        if (this.bundle.length)
            writer.writeBytes(4, this.bundle);
        if (this.hint.length)
            writer.writeString(5, this.hint);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): X509SVID {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new X509SVID();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.spiffe_id = reader.readString();
                    break;
                case 2:
                    message.x509_svid = reader.readBytes();
                    break;
                case 3:
                    message.x509_svid_key = reader.readBytes();
                    break;
                case 4:
                    message.bundle = reader.readBytes();
                    break;
                case 5:
                    message.hint = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): X509SVID {
        return X509SVID.deserialize(bytes);
    }
}
export class X509BundlesRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): X509BundlesRequest {
        const message = new X509BundlesRequest({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): X509BundlesRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new X509BundlesRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): X509BundlesRequest {
        return X509BundlesRequest.deserialize(bytes);
    }
}
export class X509BundlesResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        crl?: Uint8Array[];
        bundles?: Map<string, Uint8Array>;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("crl" in data && data.crl != undefined) {
                this.crl = data.crl;
            }
            if ("bundles" in data && data.bundles != undefined) {
                this.bundles = data.bundles;
            }
        }
        if (!this.bundles)
            this.bundles = new Map();
    }
    get crl() {
        return pb_1.Message.getFieldWithDefault(this, 1, []) as Uint8Array[];
    }
    set crl(value: Uint8Array[]) {
        pb_1.Message.setField(this, 1, value);
    }
    get bundles() {
        return pb_1.Message.getField(this, 2) as any as Map<string, Uint8Array>;
    }
    set bundles(value: Map<string, Uint8Array>) {
        pb_1.Message.setField(this, 2, value as any);
    }
    static fromObject(data: {
        crl?: Uint8Array[];
        bundles?: {
            [key: string]: Uint8Array;
        };
    }): X509BundlesResponse {
        const message = new X509BundlesResponse({});
        if (data.crl != null) {
            message.crl = data.crl;
        }
        if (typeof data.bundles == "object") {
            message.bundles = new Map(Object.entries(data.bundles));
        }
        return message;
    }
    toObject() {
        const data: {
            crl?: Uint8Array[];
            bundles?: {
                [key: string]: Uint8Array;
            };
        } = {};
        if (this.crl != null) {
            data.crl = this.crl;
        }
        if (this.bundles != null) {
            data.bundles = (Object.fromEntries)(this.bundles);
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.crl.length)
            writer.writeRepeatedBytes(1, this.crl);
        for (const [key, value] of this.bundles) {
            writer.writeMessage(2, this.bundles, () => {
                writer.writeString(1, key);
                writer.writeBytes(2, value);
            });
        }
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): X509BundlesResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new X509BundlesResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    pb_1.Message.addToRepeatedField(message, 1, reader.readBytes());
                    break;
                case 2:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.bundles as any, reader, reader.readString, reader.readBytes));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): X509BundlesResponse {
        return X509BundlesResponse.deserialize(bytes);
    }
}
export class JWTSVIDRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        audience?: string[];
        spiffe_id?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("audience" in data && data.audience != undefined) {
                this.audience = data.audience;
            }
            if ("spiffe_id" in data && data.spiffe_id != undefined) {
                this.spiffe_id = data.spiffe_id;
            }
        }
    }
    get audience() {
        return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
    }
    set audience(value: string[]) {
        pb_1.Message.setField(this, 1, value);
    }
    get spiffe_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set spiffe_id(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        audience?: string[];
        spiffe_id?: string;
    }): JWTSVIDRequest {
        const message = new JWTSVIDRequest({});
        if (data.audience != null) {
            message.audience = data.audience;
        }
        if (data.spiffe_id != null) {
            message.spiffe_id = data.spiffe_id;
        }
        return message;
    }
    toObject() {
        const data: {
            audience?: string[];
            spiffe_id?: string;
        } = {};
        if (this.audience != null) {
            data.audience = this.audience;
        }
        if (this.spiffe_id != null) {
            data.spiffe_id = this.spiffe_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.audience.length)
            writer.writeRepeatedString(1, this.audience);
        if (this.spiffe_id.length)
            writer.writeString(2, this.spiffe_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): JWTSVIDRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new JWTSVIDRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                    break;
                case 2:
                    message.spiffe_id = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): JWTSVIDRequest {
        return JWTSVIDRequest.deserialize(bytes);
    }
}
export class JWTSVIDResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        svids?: JWTSVID[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("svids" in data && data.svids != undefined) {
                this.svids = data.svids;
            }
        }
    }
    get svids() {
        return pb_1.Message.getRepeatedWrapperField(this, JWTSVID, 1) as JWTSVID[];
    }
    set svids(value: JWTSVID[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        svids?: ReturnType<typeof JWTSVID.prototype.toObject>[];
    }): JWTSVIDResponse {
        const message = new JWTSVIDResponse({});
        if (data.svids != null) {
            message.svids = data.svids.map(item => JWTSVID.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            svids?: ReturnType<typeof JWTSVID.prototype.toObject>[];
        } = {};
        if (this.svids != null) {
            data.svids = this.svids.map((item: JWTSVID) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.svids.length)
            writer.writeRepeatedMessage(1, this.svids, (item: JWTSVID) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): JWTSVIDResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new JWTSVIDResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.svids, () => pb_1.Message.addToRepeatedWrapperField(message, 1, JWTSVID.deserialize(reader), JWTSVID));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): JWTSVIDResponse {
        return JWTSVIDResponse.deserialize(bytes);
    }
}
export class JWTSVID extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        spiffe_id?: string;
        svid?: string;
        hint?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("spiffe_id" in data && data.spiffe_id != undefined) {
                this.spiffe_id = data.spiffe_id;
            }
            if ("svid" in data && data.svid != undefined) {
                this.svid = data.svid;
            }
            if ("hint" in data && data.hint != undefined) {
                this.hint = data.hint;
            }
        }
    }
    get spiffe_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set spiffe_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get svid() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set svid(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get hint() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set hint(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        spiffe_id?: string;
        svid?: string;
        hint?: string;
    }): JWTSVID {
        const message = new JWTSVID({});
        if (data.spiffe_id != null) {
            message.spiffe_id = data.spiffe_id;
        }
        if (data.svid != null) {
            message.svid = data.svid;
        }
        if (data.hint != null) {
            message.hint = data.hint;
        }
        return message;
    }
    toObject() {
        const data: {
            spiffe_id?: string;
            svid?: string;
            hint?: string;
        } = {};
        if (this.spiffe_id != null) {
            data.spiffe_id = this.spiffe_id;
        }
        if (this.svid != null) {
            data.svid = this.svid;
        }
        if (this.hint != null) {
            data.hint = this.hint;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.spiffe_id.length)
            writer.writeString(1, this.spiffe_id);
        if (this.svid.length)
            writer.writeString(2, this.svid);
        if (this.hint.length)
            writer.writeString(3, this.hint);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): JWTSVID {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new JWTSVID();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.spiffe_id = reader.readString();
                    break;
                case 2:
                    message.svid = reader.readString();
                    break;
                case 3:
                    message.hint = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): JWTSVID {
        return JWTSVID.deserialize(bytes);
    }
}
export class JWTBundlesRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): JWTBundlesRequest {
        const message = new JWTBundlesRequest({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): JWTBundlesRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new JWTBundlesRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): JWTBundlesRequest {
        return JWTBundlesRequest.deserialize(bytes);
    }
}
export class JWTBundlesResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        bundles?: Map<string, Uint8Array>;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("bundles" in data && data.bundles != undefined) {
                this.bundles = data.bundles;
            }
        }
        if (!this.bundles)
            this.bundles = new Map();
    }
    get bundles() {
        return pb_1.Message.getField(this, 1) as any as Map<string, Uint8Array>;
    }
    set bundles(value: Map<string, Uint8Array>) {
        pb_1.Message.setField(this, 1, value as any);
    }
    static fromObject(data: {
        bundles?: {
            [key: string]: Uint8Array;
        };
    }): JWTBundlesResponse {
        const message = new JWTBundlesResponse({});
        if (typeof data.bundles == "object") {
            message.bundles = new Map(Object.entries(data.bundles));
        }
        return message;
    }
    toObject() {
        const data: {
            bundles?: {
                [key: string]: Uint8Array;
            };
        } = {};
        if (this.bundles != null) {
            data.bundles = (Object.fromEntries)(this.bundles);
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        for (const [key, value] of this.bundles) {
            writer.writeMessage(1, this.bundles, () => {
                writer.writeString(1, key);
                writer.writeBytes(2, value);
            });
        }
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): JWTBundlesResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new JWTBundlesResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.bundles as any, reader, reader.readString, reader.readBytes));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): JWTBundlesResponse {
        return JWTBundlesResponse.deserialize(bytes);
    }
}
export class ValidateJWTSVIDRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        audience?: string;
        svid?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("audience" in data && data.audience != undefined) {
                this.audience = data.audience;
            }
            if ("svid" in data && data.svid != undefined) {
                this.svid = data.svid;
            }
        }
    }
    get audience() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set audience(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get svid() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set svid(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        audience?: string;
        svid?: string;
    }): ValidateJWTSVIDRequest {
        const message = new ValidateJWTSVIDRequest({});
        if (data.audience != null) {
            message.audience = data.audience;
        }
        if (data.svid != null) {
            message.svid = data.svid;
        }
        return message;
    }
    toObject() {
        const data: {
            audience?: string;
            svid?: string;
        } = {};
        if (this.audience != null) {
            data.audience = this.audience;
        }
        if (this.svid != null) {
            data.svid = this.svid;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.audience.length)
            writer.writeString(1, this.audience);
        if (this.svid.length)
            writer.writeString(2, this.svid);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ValidateJWTSVIDRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ValidateJWTSVIDRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.audience = reader.readString();
                    break;
                case 2:
                    message.svid = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ValidateJWTSVIDRequest {
        return ValidateJWTSVIDRequest.deserialize(bytes);
    }
}
export class ValidateJWTSVIDResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        spiffe_id?: string;
        claims?: dependency_1.google.protobuf.Struct;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("spiffe_id" in data && data.spiffe_id != undefined) {
                this.spiffe_id = data.spiffe_id;
            }
            if ("claims" in data && data.claims != undefined) {
                this.claims = data.claims;
            }
        }
    }
    get spiffe_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set spiffe_id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get claims() {
        return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Struct, 2) as dependency_1.google.protobuf.Struct;
    }
    set claims(value: dependency_1.google.protobuf.Struct) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_claims() {
        return pb_1.Message.getField(this, 2) != null;
    }
    static fromObject(data: {
        spiffe_id?: string;
        claims?: ReturnType<typeof dependency_1.google.protobuf.Struct.prototype.toObject>;
    }): ValidateJWTSVIDResponse {
        const message = new ValidateJWTSVIDResponse({});
        if (data.spiffe_id != null) {
            message.spiffe_id = data.spiffe_id;
        }
        if (data.claims != null) {
            message.claims = dependency_1.google.protobuf.Struct.fromObject(data.claims);
        }
        return message;
    }
    toObject() {
        const data: {
            spiffe_id?: string;
            claims?: ReturnType<typeof dependency_1.google.protobuf.Struct.prototype.toObject>;
        } = {};
        if (this.spiffe_id != null) {
            data.spiffe_id = this.spiffe_id;
        }
        if (this.claims != null) {
            data.claims = this.claims.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.spiffe_id.length)
            writer.writeString(1, this.spiffe_id);
        if (this.has_claims)
            writer.writeMessage(2, this.claims, () => this.claims.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ValidateJWTSVIDResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ValidateJWTSVIDResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.spiffe_id = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.claims, () => message.claims = dependency_1.google.protobuf.Struct.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ValidateJWTSVIDResponse {
        return ValidateJWTSVIDResponse.deserialize(bytes);
    }
}
interface GrpcUnaryServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
}
interface GrpcStreamServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
}
interface GrpWritableServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
}
interface GrpcChunkServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
}
interface GrpcPromiseServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
    (message: P, options?: grpc_1.CallOptions): Promise<R>;
}
export abstract class UnimplementedSpiffeWorkloadAPIService {
    static definition = {
        FetchX509SVID: {
            path: "/SpiffeWorkloadAPI/FetchX509SVID",
            requestStream: false,
            responseStream: true,
            requestSerialize: (message: X509SVIDRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => X509SVIDRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: X509SVIDResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => X509SVIDResponse.deserialize(new Uint8Array(bytes))
        },
        FetchX509Bundles: {
            path: "/SpiffeWorkloadAPI/FetchX509Bundles",
            requestStream: false,
            responseStream: true,
            requestSerialize: (message: X509BundlesRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => X509BundlesRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: X509BundlesResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => X509BundlesResponse.deserialize(new Uint8Array(bytes))
        },
        FetchJWTSVID: {
            path: "/SpiffeWorkloadAPI/FetchJWTSVID",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: JWTSVIDRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => JWTSVIDRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: JWTSVIDResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => JWTSVIDResponse.deserialize(new Uint8Array(bytes))
        },
        FetchJWTBundles: {
            path: "/SpiffeWorkloadAPI/FetchJWTBundles",
            requestStream: false,
            responseStream: true,
            requestSerialize: (message: JWTBundlesRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => JWTBundlesRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: JWTBundlesResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => JWTBundlesResponse.deserialize(new Uint8Array(bytes))
        },
        ValidateJWTSVID: {
            path: "/SpiffeWorkloadAPI/ValidateJWTSVID",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: ValidateJWTSVIDRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => ValidateJWTSVIDRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: ValidateJWTSVIDResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => ValidateJWTSVIDResponse.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract FetchX509SVID(call: grpc_1.ServerWritableStream<X509SVIDRequest, X509SVIDResponse>): void;
    abstract FetchX509Bundles(call: grpc_1.ServerWritableStream<X509BundlesRequest, X509BundlesResponse>): void;
    abstract FetchJWTSVID(call: grpc_1.ServerUnaryCall<JWTSVIDRequest, JWTSVIDResponse>, callback: grpc_1.sendUnaryData<JWTSVIDResponse>): void;
    abstract FetchJWTBundles(call: grpc_1.ServerWritableStream<JWTBundlesRequest, JWTBundlesResponse>): void;
    abstract ValidateJWTSVID(call: grpc_1.ServerUnaryCall<ValidateJWTSVIDRequest, ValidateJWTSVIDResponse>, callback: grpc_1.sendUnaryData<ValidateJWTSVIDResponse>): void;
}
export class SpiffeWorkloadAPIClient extends grpc_1.makeGenericClientConstructor(UnimplementedSpiffeWorkloadAPIService.definition, "SpiffeWorkloadAPI", {}) {
    constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
        super(address, credentials, options);
    }
    FetchX509SVID: GrpcStreamServiceInterface<X509SVIDRequest, X509SVIDResponse> = (message: X509SVIDRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<X509SVIDResponse> => {
        return super.FetchX509SVID(message, metadata, options);
    };
    FetchX509Bundles: GrpcStreamServiceInterface<X509BundlesRequest, X509BundlesResponse> = (message: X509BundlesRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<X509BundlesResponse> => {
        return super.FetchX509Bundles(message, metadata, options);
    };
    FetchJWTSVID: GrpcUnaryServiceInterface<JWTSVIDRequest, JWTSVIDResponse> = (message: JWTSVIDRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<JWTSVIDResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<JWTSVIDResponse>, callback?: grpc_1.requestCallback<JWTSVIDResponse>): grpc_1.ClientUnaryCall => {
        return super.FetchJWTSVID(message, metadata, options, callback);
    };
    FetchJWTBundles: GrpcStreamServiceInterface<JWTBundlesRequest, JWTBundlesResponse> = (message: JWTBundlesRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<JWTBundlesResponse> => {
        return super.FetchJWTBundles(message, metadata, options);
    };
    ValidateJWTSVID: GrpcUnaryServiceInterface<ValidateJWTSVIDRequest, ValidateJWTSVIDResponse> = (message: ValidateJWTSVIDRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ValidateJWTSVIDResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ValidateJWTSVIDResponse>, callback?: grpc_1.requestCallback<ValidateJWTSVIDResponse>): grpc_1.ClientUnaryCall => {
        return super.ValidateJWTSVID(message, metadata, options, callback);
    };
}
